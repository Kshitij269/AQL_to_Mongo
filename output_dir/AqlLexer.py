# Generated from Aql.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,5,27,171,8,27,10,27,12,27,174,9,27,1,28,1,28,1,28,1,28,
        5,28,180,8,28,10,28,12,28,183,9,28,1,28,1,28,1,29,4,29,188,8,29,
        11,29,12,29,189,1,29,1,29,4,29,194,8,29,11,29,12,29,195,3,29,198,
        8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,209,8,30,
        1,31,4,31,212,8,31,11,31,12,31,213,1,31,1,31,0,0,32,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,1,0,5,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,39,39,92,92,1,0,48,57,3,0,9,10,
        13,13,32,32,224,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,72,1,0,0,0,
        5,77,1,0,0,0,7,86,1,0,0,0,9,92,1,0,0,0,11,95,1,0,0,0,13,99,1,0,0,
        0,15,102,1,0,0,0,17,106,1,0,0,0,19,114,1,0,0,0,21,121,1,0,0,0,23,
        127,1,0,0,0,25,130,1,0,0,0,27,134,1,0,0,0,29,139,1,0,0,0,31,141,
        1,0,0,0,33,144,1,0,0,0,35,146,1,0,0,0,37,148,1,0,0,0,39,151,1,0,
        0,0,41,154,1,0,0,0,43,156,1,0,0,0,45,158,1,0,0,0,47,160,1,0,0,0,
        49,162,1,0,0,0,51,164,1,0,0,0,53,166,1,0,0,0,55,168,1,0,0,0,57,175,
        1,0,0,0,59,187,1,0,0,0,61,208,1,0,0,0,63,211,1,0,0,0,65,66,5,83,
        0,0,66,67,5,69,0,0,67,68,5,76,0,0,68,69,5,69,0,0,69,70,5,67,0,0,
        70,71,5,84,0,0,71,2,1,0,0,0,72,73,5,70,0,0,73,74,5,82,0,0,74,75,
        5,79,0,0,75,76,5,77,0,0,76,4,1,0,0,0,77,78,5,67,0,0,78,79,5,79,0,
        0,79,80,5,78,0,0,80,81,5,84,0,0,81,82,5,65,0,0,82,83,5,73,0,0,83,
        84,5,78,0,0,84,85,5,83,0,0,85,6,1,0,0,0,86,87,5,87,0,0,87,88,5,72,
        0,0,88,89,5,69,0,0,89,90,5,82,0,0,90,91,5,69,0,0,91,8,1,0,0,0,92,
        93,5,65,0,0,93,94,5,83,0,0,94,10,1,0,0,0,95,96,5,65,0,0,96,97,5,
        78,0,0,97,98,5,68,0,0,98,12,1,0,0,0,99,100,5,79,0,0,100,101,5,82,
        0,0,101,14,1,0,0,0,102,103,5,78,0,0,103,104,5,79,0,0,104,105,5,84,
        0,0,105,16,1,0,0,0,106,107,5,77,0,0,107,108,5,65,0,0,108,109,5,84,
        0,0,109,110,5,67,0,0,110,111,5,72,0,0,111,112,5,69,0,0,112,113,5,
        83,0,0,113,18,1,0,0,0,114,115,5,69,0,0,115,116,5,88,0,0,116,117,
        5,73,0,0,117,118,5,83,0,0,118,119,5,84,0,0,119,120,5,83,0,0,120,
        20,1,0,0,0,121,122,5,79,0,0,122,123,5,82,0,0,123,124,5,68,0,0,124,
        125,5,69,0,0,125,126,5,82,0,0,126,22,1,0,0,0,127,128,5,66,0,0,128,
        129,5,89,0,0,129,24,1,0,0,0,130,131,5,65,0,0,131,132,5,83,0,0,132,
        133,5,67,0,0,133,26,1,0,0,0,134,135,5,68,0,0,135,136,5,69,0,0,136,
        137,5,83,0,0,137,138,5,67,0,0,138,28,1,0,0,0,139,140,5,61,0,0,140,
        30,1,0,0,0,141,142,5,33,0,0,142,143,5,61,0,0,143,32,1,0,0,0,144,
        145,5,62,0,0,145,34,1,0,0,0,146,147,5,60,0,0,147,36,1,0,0,0,148,
        149,5,62,0,0,149,150,5,61,0,0,150,38,1,0,0,0,151,152,5,60,0,0,152,
        153,5,61,0,0,153,40,1,0,0,0,154,155,5,59,0,0,155,42,1,0,0,0,156,
        157,5,44,0,0,157,44,1,0,0,0,158,159,5,47,0,0,159,46,1,0,0,0,160,
        161,5,91,0,0,161,48,1,0,0,0,162,163,5,93,0,0,163,50,1,0,0,0,164,
        165,5,40,0,0,165,52,1,0,0,0,166,167,5,41,0,0,167,54,1,0,0,0,168,
        172,7,0,0,0,169,171,7,1,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,
        170,1,0,0,0,172,173,1,0,0,0,173,56,1,0,0,0,174,172,1,0,0,0,175,181,
        5,39,0,0,176,180,8,2,0,0,177,178,5,92,0,0,178,180,9,0,0,0,179,176,
        1,0,0,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,
        1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,39,0,0,185,58,
        1,0,0,0,186,188,7,3,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,
        1,0,0,0,189,190,1,0,0,0,190,197,1,0,0,0,191,193,5,46,0,0,192,194,
        7,3,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,
        1,0,0,0,196,198,1,0,0,0,197,191,1,0,0,0,197,198,1,0,0,0,198,60,1,
        0,0,0,199,200,5,116,0,0,200,201,5,114,0,0,201,202,5,117,0,0,202,
        209,5,101,0,0,203,204,5,102,0,0,204,205,5,97,0,0,205,206,5,108,0,
        0,206,207,5,115,0,0,207,209,5,101,0,0,208,199,1,0,0,0,208,203,1,
        0,0,0,209,62,1,0,0,0,210,212,7,4,0,0,211,210,1,0,0,0,212,213,1,0,
        0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,6,31,
        0,0,216,64,1,0,0,0,9,0,172,179,181,189,195,197,208,213,1,6,0,0
    ]

class AqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELECT = 1
    FROM = 2
    CONTAINS = 3
    WHERE = 4
    AS = 5
    AND = 6
    OR = 7
    NOT = 8
    MATCHES = 9
    EXISTS = 10
    ORDER = 11
    BY = 12
    ASC = 13
    DESC = 14
    EQUALS = 15
    NOT_EQUALS = 16
    GT = 17
    LT = 18
    GTE = 19
    LTE = 20
    SEMI = 21
    COMMA = 22
    SLASH = 23
    LBRACK = 24
    RBRACK = 25
    LPAREN = 26
    RPAREN = 27
    ID = 28
    STRING = 29
    NUMBER = 30
    BOOLEAN = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'SELECT'", "'FROM'", "'CONTAINS'", "'WHERE'", "'AS'", "'AND'", 
            "'OR'", "'NOT'", "'MATCHES'", "'EXISTS'", "'ORDER'", "'BY'", 
            "'ASC'", "'DESC'", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", 
            "';'", "','", "'/'", "'['", "']'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "CONTAINS", "WHERE", "AS", "AND", "OR", "NOT", 
            "MATCHES", "EXISTS", "ORDER", "BY", "ASC", "DESC", "EQUALS", 
            "NOT_EQUALS", "GT", "LT", "GTE", "LTE", "SEMI", "COMMA", "SLASH", 
            "LBRACK", "RBRACK", "LPAREN", "RPAREN", "ID", "STRING", "NUMBER", 
            "BOOLEAN", "WS" ]

    ruleNames = [ "SELECT", "FROM", "CONTAINS", "WHERE", "AS", "AND", "OR", 
                  "NOT", "MATCHES", "EXISTS", "ORDER", "BY", "ASC", "DESC", 
                  "EQUALS", "NOT_EQUALS", "GT", "LT", "GTE", "LTE", "SEMI", 
                  "COMMA", "SLASH", "LBRACK", "RBRACK", "LPAREN", "RPAREN", 
                  "ID", "STRING", "NUMBER", "BOOLEAN", "WS" ]

    grammarFileName = "Aql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



# Generated from Aql.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,96,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,74,
        8,11,10,11,12,11,77,9,11,1,12,1,12,1,12,1,12,5,12,83,8,12,10,12,
        12,12,86,9,12,1,12,1,12,1,13,4,13,91,8,13,11,13,12,13,92,1,13,1,
        13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,2,0,39,39,92,92,3,0,9,10,13,13,32,32,99,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,36,1,0,0,0,5,41,1,0,
        0,0,7,50,1,0,0,0,9,56,1,0,0,0,11,59,1,0,0,0,13,61,1,0,0,0,15,63,
        1,0,0,0,17,65,1,0,0,0,19,67,1,0,0,0,21,69,1,0,0,0,23,71,1,0,0,0,
        25,78,1,0,0,0,27,90,1,0,0,0,29,30,5,83,0,0,30,31,5,69,0,0,31,32,
        5,76,0,0,32,33,5,69,0,0,33,34,5,67,0,0,34,35,5,84,0,0,35,2,1,0,0,
        0,36,37,5,70,0,0,37,38,5,82,0,0,38,39,5,79,0,0,39,40,5,77,0,0,40,
        4,1,0,0,0,41,42,5,67,0,0,42,43,5,79,0,0,43,44,5,78,0,0,44,45,5,84,
        0,0,45,46,5,65,0,0,46,47,5,73,0,0,47,48,5,78,0,0,48,49,5,83,0,0,
        49,6,1,0,0,0,50,51,5,87,0,0,51,52,5,72,0,0,52,53,5,69,0,0,53,54,
        5,82,0,0,54,55,5,69,0,0,55,8,1,0,0,0,56,57,5,65,0,0,57,58,5,83,0,
        0,58,10,1,0,0,0,59,60,5,61,0,0,60,12,1,0,0,0,61,62,5,59,0,0,62,14,
        1,0,0,0,63,64,5,44,0,0,64,16,1,0,0,0,65,66,5,47,0,0,66,18,1,0,0,
        0,67,68,5,91,0,0,68,20,1,0,0,0,69,70,5,93,0,0,70,22,1,0,0,0,71,75,
        7,0,0,0,72,74,7,1,0,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,
        75,76,1,0,0,0,76,24,1,0,0,0,77,75,1,0,0,0,78,84,5,39,0,0,79,83,8,
        2,0,0,80,81,5,92,0,0,81,83,9,0,0,0,82,79,1,0,0,0,82,80,1,0,0,0,83,
        86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,84,1,0,0,
        0,87,88,5,39,0,0,88,26,1,0,0,0,89,91,7,3,0,0,90,89,1,0,0,0,91,92,
        1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,94,1,0,0,0,94,95,6,13,0,0,
        95,28,1,0,0,0,5,0,75,82,84,92,1,6,0,0
    ]

class AqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SELECT = 1
    FROM = 2
    CONTAINS = 3
    WHERE = 4
    AS = 5
    EQUALS = 6
    SEMI = 7
    COMMA = 8
    SLASH = 9
    LBRACK = 10
    RBRACK = 11
    ID = 12
    STRING = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'SELECT'", "'FROM'", "'CONTAINS'", "'WHERE'", "'AS'", "'='", 
            "';'", "','", "'/'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "SELECT", "FROM", "CONTAINS", "WHERE", "AS", "EQUALS", "SEMI", 
            "COMMA", "SLASH", "LBRACK", "RBRACK", "ID", "STRING", "WS" ]

    ruleNames = [ "SELECT", "FROM", "CONTAINS", "WHERE", "AS", "EQUALS", 
                  "SEMI", "COMMA", "SLASH", "LBRACK", "RBRACK", "ID", "STRING", 
                  "WS" ]

    grammarFileName = "Aql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


